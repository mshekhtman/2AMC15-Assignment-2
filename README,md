# Data Intelligence Challenge 2AMC15 - Assignment 2
## Restaurant Delivery Robot with Continuous State Space

This repository contains the implementation for Assignment 2, featuring a **continuous state space environment** for training deep reinforcement learning agents on a restaurant food delivery task.

## Assignment Focus

**Stakeholder**: Restaurant chain seeking to automate food delivery within their establishments  
**Problem**: Train a delivery robot to efficiently navigate restaurant environments and deliver orders  
**Solution**: Deep RL with continuous state representation for realistic robot behavior

## Key Changes from Assignment 1

### **Environment Enhancements**
- **Continuous State Space**: 15-dimensional vector replacing discrete grid positions
- **Restaurant-Optimized Rewards**: Enhanced for delivery efficiency, safety, and smooth movement
- **Movement Dynamics**: Velocity tracking and momentum for realistic robot behavior
- **Local Environment Sensing**: 3Ã—3 obstacle detection around agent
- **Mission Progress Tracking**: Target counting and completion progress

### **State Representation (15D Vector)**
```python
[0-1]   : Normalized position (x, y)           # [0, 1]
[2]     : Distance to nearest target          # [0, 1] 
[3-4]   : Direction to target (unit vector)   # [-1, 1]
[5]     : Remaining targets (normalized)      # [0, 1]
[6]     : Local obstacle density             # [0, 1]
[7-10]  : Clear directions (front/left/right/back) # {0, 1}
[11-12] : Velocity vector                    # [-1, 1]
[13]    : Speed (velocity magnitude)         # [0, âˆž]
[14]    : Mission progress                   # [0, 1]
```

## Quick Start

### Setup Environment
```bash
# Create conda environment
conda create -n dic2025 python=3.11
conda activate dic2025

# Install dependencies
pip install -r requirements.txt

# Create restaurant grids
python create_restaurant_grids.py

# Test implementation
python test_continuous_states.py
```

### Training Examples
```bash
# Test heuristic baseline
python train.py grid_configs/restaurant_grid.npy --agent_type heuristic --episodes 20

# Train DQN (baseline for Assignment 2)
python train.py grid_configs/restaurant_grid.npy --agent_type dqn --episodes 200 --no_gui

# Compare with discrete states (backward compatibility)
python train.py grid_configs/restaurant_grid.npy --state_representation discrete --agent_type random
```

## New File Structure

```
â”œâ”€â”€ agents/
â”‚   â”œâ”€â”€ heuristic_agent.py       # Intelligent baseline using state features
â”‚   â”œâ”€â”€ simple_dqn_agent.py      # DQN implementation for continuous states
â”‚   â””â”€â”€ base_agent.py            # Enhanced for continuous state support
â”œâ”€â”€ world/
â”‚   â””â”€â”€ environment.py           # Continuous state space implementation
â”œâ”€â”€ grid_configs/
â”‚   â”œâ”€â”€ restaurant_grid.npy      # Restaurant layout
â”‚   â””â”€â”€ simple_test_grid.npy     # Simple test environment
â”œâ”€â”€ create_restaurant_grids.py   # Generate restaurant environments
â”œâ”€â”€ test_continuous_states.py    # Validation and testing suite
â””â”€â”€ train.py                     # Updated training script
```

## Available Agents

| Agent | Type | Description | Use Case |
|-------|------|-------------|----------|
| `RandomAgent` | Baseline | Random actions | Sanity check |
| `HeuristicAgent` | Rule-based | Uses state features intelligently | Strong baseline |
| `SimpleDQNAgent` | Deep RL | Neural network Q-learning | Assignment 2 baseline |

## Environment Configuration

```python
# Continuous state environment
env = Environment(
    grid_fp="grid_configs/restaurant_grid.npy",
    state_representation="continuous_vector",  # NEW
    sigma=0.1,                                # Stochasticity
    agent_start_pos=(3, 11)                   # Fixed start for comparison
)

# Backward compatible discrete environment
env = Environment(
    grid_fp="grid_configs/restaurant_grid.npy", 
    state_representation="discrete"
)
```
## ðŸ”§ Development Tools

```bash
# Code quality
black *.py                    # Format code
flake8 --max-line-length 100  # Check style

# Testing
python test_continuous_states.py  # Validate implementation
pytest tests/                     # Run unit tests

# Training monitoring
tensorboard --logdir runs/        # Visualize training (if implemented)
```